###  kendo 表单的测试
#parse("platform/head.vm")
<title>kendo-grid</title>
<link rel="stylesheet" href="/static/framework/styles/kendo.common.min.css">
## 默认的颜色掩饰  橘红色
<link rel="stylesheet" href="/static/framework/styles/kendo.default.min.css">
##颜色样式 天蓝色
<link rel="stylesheet" href="/static/framework/styles/kendo.silver.min.css">
</head>
<body>
    <div class="container">
        #parse("platform/navbar.vm")
        <div class="row">
        ## 设置导航条一下 左侧栏导航
            <div class="col-md-2 sider">

            </div>
        ## 内容
            <div class="row col-md-9 content" >

                <div class="row">
                    <div id="grid">

                    </div>
                </div>
            </div>
    </div>


</body>
#parse("platform/footer.vm")
<script src="/static/framework/js/kendo.all.min.js"></script>
<script src="/static/framework/js/kendo.web.min.js"></script>
##交替模板
<script id="alt-template" type="text/x-kendo-template">
    <tr data-uid="#= uid #">
        <td colspan="3">
            <strong>#: id #</strong>
            <strong>#: name #</strong>


            
        </td>
    </tr>
</script>
<script id="template" type="text/x-kendo-template">
    <a class="k-button" href="\#" onclick="return toolbar_click()">Command</a>
</script>
<script>

    //初始化 js脚本
    $(document).ready(function () {

        //初始化 kendogrid表格
        $("#grid").kendoGrid({
            //对于数据源只需要给定数据对象就能显示  但是如果需要分页就必须要在后端声明一个分页的数据对象
            dataSource:dataSource,

            ####工具条设置  有两种模式 一种是模板 一种是自带的属性
            toolbar:[
                {
                    name:"create",
                    text:"新增用户",

                },
                //模板测试 工具条窗口
                {
                    template: kendo.template($("#template").html())
                },
                /* {//如果有新增用户 则新增用户不会进入create页面 而是进入update
                name:"save"
              },*/


            ],
            //toolbar:"<input type='button' value='导出' ></input>",//使用模板设置

            //设置表格元素的被选择能力   cell 是针对一个单元格  row 针对一行  multiple 是允许多选  如果致谢multiple 默认是选中行的
            selectable: "multiple row ", //此属性不写则默认是不能被选中的   此项和selectable是互相排斥额

            // 交替模板
           //altRowTemplate: kendo.template($("#alt-template").html()),


            //sortable:true,//设置每类是可排序的
            sortable:{
                allowUnsort:true, //设置允许取消排序
                //showIndexes:true,
                mode:"multiple",//排序模式  simple  multiple
                initialDirection: "desc",//设置初始化方向
            },
            //设置滚动条
           /* scrollable:{
                virtual:true
            },*/

            saveChanges: function(e) {
                if (!confirm("Are you sure you want to save all changes?")) {
                    e.preventDefault();
                }
            },
        ############################################## TODO
            //autoBind : true,//默认  数据绑定
            //columnResizeHandleWidth: 1,
            // TODO
            // allowCopy:true,
            /*allowCopy:{
                delimeter:","  //更改分割符 默认是 \t
            },*/
        ###############################################



            //此参数是设置表格中是否显示分页的菜单栏 如果设置为false将不显示菜单栏 但是如果dateSource中设置设置了pageSize属性 ：一页显示的数量则 只能显示size条数据
            //pageable:false,
            //如果开启分页能力 则会显示分页菜单栏 以下设置分页属性
            pageable: {//设置分页参数 具有分页能力
               refresh: true,//出现刷新按钮  会重新加载表单 阅读read
               pageSizes: true,//出现 分页天数设置 选项
               buttonCount: 5 , //设置按钮个数
               input: true, //设置页码输入选择的能力
               numeric: true, //设置页码数字选择能力
               messages: {  //设置分页属性 显示语言自定义
                    display: "{0} - {1} 共 {2} 条数据",
                    empty: "没有数据",
                    page: "页",
                    of: "/ {0}",
                    itemsPerPage: "条每页",
                    first: "第一页",
                    previous: "前一页",
                    next: "下一页",
                    last: "最后一页",
                    refresh: "刷新"
                 }
           },
            //设置表格是否支持分组
            groupable:true,
            //设置表格可编辑 配合 command命令使用
            //editable:false,//第一种
             editable:"popup",//"inline"设置当前列上为可编辑 "popup" 编辑弹出框模式

            filterable:true,//启用过滤菜单  启用之后各个列是默认启用的如果设置某个列不启用可以在columns中设置
            //过滤菜单有很多用法 需要可在看文档 这里先不写了

            //设置表格列的显示
            columns: [
               /* {
                    selectable:true,//设置复选框 上面配置的selectable是互相排斥的
                },*/
                {
                    field: "id", //对应的显示对象中的属性名称
                    title: "ID", //设置当前列显示的名称
                    width: 200 , //设置当前列的宽度
                    groupable: true, //设置是否支持分组
                    aggregates: [ "count", "min", "max" ],//聚合  配合group使用
                    //设置分组之后的模板 样式
                    groupFooterTemplate: "总数: #: count #, 最小值: #: min #, 最大值: #: max #",
                    //此列和dataSoure中的group配合使用
                    //groupHeaderTemplate: " 总数: #: count #",

                    //设置当前列属性
                    attributes:{
                        style:"color:red" ,//设置当前列字体颜色为红色
                    },

                    //设置当前列头的属性
                    headerAttributes:{
                        style:"text-align:right",//设置id列头靠右对齐
                    },
                    //headerTemplate:"",//设置 当前列头的模板
                    hidden:true,//是否隐藏当前列
                   //locked:true ,//设置是否被冻结
                   //lockable:false,
                    //设置列中的列  如果设置这个列 上面的属性都没用了
                    /*columns:[
                        {field:"id"},
                        {field:"name"},
                    ],*/
                    //当表格设置为可改变尺寸是当前属性才有意义   设置最小的宽度
                    minResizableWidth: 80,
                    editable:function(dateItem){ //通过函数来控制当前行是否可编辑
                        return dateItem.name == "颜良"
                    },
                    encoded:false,//将此列值进行html编码  默认为编码的false
                    filterable:false, //设置当前列不启用过滤菜单

                    //必须配合dateSource中的aggregate属性一起使用方才有效
                    footerTemplate: "Min: #: min # Max: #: max #", //开启下边栏的显示功能
                    footerAttributes: { //设置显示的属性
                        //"class": "table-footer-cell",
                        style: "text-align: right; font-size: 14px"
                    },
                    format:"{0:0}",//将id转换为美元格式



                },
                {
                    field: "name",
                    title: "姓名",
                    //自定义编辑
                    editor: function(container, options) {
                        //此内容设置的是当编辑名称时 会自动提示现有的姓名
                        // create an input element
                        var input = $("<input/>");
                        // set its name to the field to which the column is bound ('name' in this case)
                        input.attr("name", options.field);
                        // append it to the container
                        input.appendTo(container);
                        // initialize a Kendo UI AutoComplete
                        input.kendoAutoComplete({
                            dataTextField: "name",
                            dataSource: [
                                { name: "Jane Doe" },
                                { name: "John Doeddddd" }
                            ]
                        });
                    }
                },
                {
                    field: "address",
                    title: "地址",
                },
                    //在columns中 没增加一个{} 相当于新增一列

                {
                    title:"命令行",
                    width: 300,
                    //设置此列的命令 例如 新增 编辑  销毁 详情 删除等
                    //command:"destroy", //第一种只添加一个命令的方式
                    //command:["edit","destroy"],//第二种新增两个或者三个命令的方式
                    command:[
                        {
                            name:" 详情",
                            iconClass: "fa fa-upload",//给当前命令添加一个图标
                            click:function (e) {
                                //书写点击之后要做的事情
                                var tr = $(e.target).closest("tr");
                                var data = this.dataItem(tr);
                                console.log(data.name); //输出当前行的姓名
                                console.log(e);//输出
                            },

                        },
                        {
                            name:"edit",//设置命令的名称 内置的为destroy edit
                            //text:"编辑",//更改命令的名称
                            text:{  //对内部的命令名称进行显示的更改
               /* edit:"编辑",
                                update:"更新",
                                cancel:"取消"*/
                            },
                            click:function (e) {
                                //书写点击之后要做的事情
                                var tr = $(e.target).closest("tr");
                                var data = this.dataItem(tr);
                               // console.log(data.name);
                                //console.log(e);//输出
                            },


                        },
                        {
                            name:"destroy",//设置编辑名称 如果为kendo自带样式 则可直接使用 例如 ： destroy edit
                            text:"删除",///



############################################################## TODO

                            className:"btn btn-primary",//css样式应用与命令
                            //设置当前命令的可见行
                            visible:function (dataItem) {
                                //console.log(dataItem);
                                return dataItem.id == 5//设置只有姓名为严良的才能显示删除按钮
                            },
###########################################################
                        }
                    ]
                }
            ]
        });




    })
    /**
     *数据源的设置  属性等
     *
     */
    var dataSource = new kendo.data.DataSource({
        //聚合   合计sum 总数sount 最大 max 最小min 平均average
       /* aggregate:[
            {"field":"name",}
        ]*/
        //type: "odata", //如果加这个属性就必须 在返回的列表中有__count 这个对应列表的总数的字段  不过可以在schems中更改
        transport: {
            //当前主页面表格数据阅读
            read: { //
                type: "post",  //请求类型
                url: "/user/list", //请求的url路径
                dataType: "json",//发出请求携带参数的类型
                contentType: "application/json" //请求头设置类型
             },
            // 编辑数据时触发测update方法进行数据的更新
            update: {
                type:"post",
                url:"/user/update",
                dataType:"json",
                data:{
                    date:new Date(),
                },
                complete:function(){
                    //跟新完成后进行数据的刷新 重新读取数据
                    $("#grid").data("kendoGrid").dataSource.read();
                    layer.msg("更新成功！")
                }

            },
            create: {
                type:"post",
                url:"/user/create",
                dataType:"json",
                complete:function(){
                    //跟新完成后进行数据的刷新 重新读取数据
                    //不支持链式调用
                    var grid = $("#grid").data("kendoGrid");
                    grid.dataSource.read();
                   // $("#grid").data("kendoGrid").dataSource.read;
                    layer.msg("新增成功！")
                }

            },
            destroy:{
                type:"post",
                url:"/user/destroy",
                dataType:"json",
                complete:function(){
                    //跟新完成后进行数据的刷新 重新读取数据
                    //不支持链式调用
                    var grid = $("#grid").data("kendoGrid");
                    grid.dataSource.read();
                    // $("#grid").data("kendoGrid").dataSource.read;
                    layer.msg("删除成功！")
                }
            },

            //
            parameterMap: function (options, operation) {
                //用来判断 发出的请求是什么方式  read  create 等
                if (operation == "read") {
                    //alert(options.page);
                    //alert(options.pageSize);
                    options.pageNo =  options.page,
                    options.pageSize = options.pageSize

                    return options;//将分页的页码也尺寸返回给服务端
                }else{
                    var parameter = options.models[0];//得到更改后的数据对象

                    //加上此刷新 才会在更改或者保存数据是关闭页面
                    $("#grid").data("kendoGrid").refresh();
                    ///return kendo.stringify(parameter);
                    return parameter;
                }
            },
        },
        batch: true, //当使用create和update是需要把这个属性设置为true 否则不会发出url
        pageSize: 10, //设置分页 每页条数
        schema: {
            total:function(re){ //此回掉函数是返回的查询的数据数组 使用其length可以得到列表的总长度
                console.log(re);
                return re.length;
            },//声明返回的总数字段是哪个

            model:{ id :"id"},
        },
        //serverPaging: true,//设置通过服务端进行分页
        //设置 聚合  在grid的中使用 foottemplate才会有效果
        aggregate: [
            { field: "id", aggregate: "min" },
            { field: "id", aggregate: "max" }
        ],
        //设置显示的数据是否分组 或者以什么字段分组
       /* group:{
            field:"id",
            aggregates:[
                {
                    filed:"id",
                    aggregate:"count",
                }
            ]
        }*/
    });


    //工具条 点击事件
    function toolbar_click() {
        console.log("Toolbar command is clicked!");
        return false;
    }

    /**
     * 重新阅读当前列表
     */
    function  reReadList(){
        var grid = $("#grid").data("kendoGrid");
        grid.dataSource.read();
    }
    /**
     * 刷新 当前列表
     */
    function refresh(){
        $("#grid").data("kendoGrid").refresh();
    }

</script>